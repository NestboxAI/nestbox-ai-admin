/* tslint:disable */
/* eslint-disable */
/**
 * Nestbox API Documents API
 * API for Nestbox Documents, control your documents
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BadRequestExceptionResponse
 */
export interface BadRequestExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof BadRequestExceptionResponse
     */
    'message': string;
    /**
     * 
     * @type {object}
     * @memberof BadRequestExceptionResponse
     */
    'errors': object | null;
}
/**
 * 
 * @export
 * @interface ChunkFileRequestDTO
 */
export interface ChunkFileRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ChunkFileRequestDTO
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ChunkFileRequestDTO
     */
    'url': string;
    /**
     * 
     * @type {object}
     * @memberof ChunkFileRequestDTO
     */
    'options': object;
}
/**
 * 
 * @export
 * @interface CreateCollectionRequestDTO
 */
export interface CreateCollectionRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateCollectionRequestDTO
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof CreateCollectionRequestDTO
     */
    'metadata': object;
}
/**
 * 
 * @export
 * @interface CreateDocumentRequestDTO
 */
export interface CreateDocumentRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateDocumentRequestDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDocumentRequestDTO
     */
    'document': string;
    /**
     * 
     * @type {object}
     * @memberof CreateDocumentRequestDTO
     */
    'metadata': object;
}
/**
 * 
 * @export
 * @interface FatalErrorExceptionResponse
 */
export interface FatalErrorExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof FatalErrorExceptionResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ForbiddenExceptionResponse
 */
export interface ForbiddenExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof ForbiddenExceptionResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface MessageResponseDTO
 */
export interface MessageResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof MessageResponseDTO
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NotFoundExceptionResponse
 */
export interface NotFoundExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof NotFoundExceptionResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SimilaritySearchQueryDTO
 */
export interface SimilaritySearchQueryDTO {
    /**
     * 
     * @type {string}
     * @memberof SimilaritySearchQueryDTO
     */
    'query': string;
    /**
     * 
     * @type {object}
     * @memberof SimilaritySearchQueryDTO
     */
    'params': object;
    /**
     * 
     * @type {object}
     * @memberof SimilaritySearchQueryDTO
     */
    'filter': object;
    /**
     * 
     * @type {Array<string>}
     * @memberof SimilaritySearchQueryDTO
     */
    'include': Array<string>;
}
/**
 * 
 * @export
 * @interface UnauthorizedExceptionResponse
 */
export interface UnauthorizedExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedExceptionResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UpdateDocumentRequestDTO
 */
export interface UpdateDocumentRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateDocumentRequestDTO
     */
    'document': string;
    /**
     * 
     * @type {object}
     * @memberof UpdateDocumentRequestDTO
     */
    'metadata': object;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CollectionApi - axios parameter creator
 * @export
 */
export const CollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new doc
         * @param {string} collectionId 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerAddDocToCollection: async (collectionId: string, createDocumentRequestDTO: CreateDocumentRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerAddDocToCollection', 'collectionId', collectionId)
            // verify required parameter 'createDocumentRequestDTO' is not null or undefined
            assertParamExists('collectionControllerAddDocToCollection', 'createDocumentRequestDTO', createDocumentRequestDTO)
            const localVarPath = `/collections/{collection_id}/docs`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Use a file to chunk and add to collection
         * @param {string} collectionId 
         * @param {ChunkFileRequestDTO} chunkFileRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerChunkFileToCollection: async (collectionId: string, chunkFileRequestDTO: ChunkFileRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerChunkFileToCollection', 'collectionId', collectionId)
            // verify required parameter 'chunkFileRequestDTO' is not null or undefined
            assertParamExists('collectionControllerChunkFileToCollection', 'chunkFileRequestDTO', chunkFileRequestDTO)
            const localVarPath = `/collections/{collection_id}/docs/file`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chunkFileRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new collection
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerCreateCollection: async (createCollectionRequestDTO: CreateCollectionRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCollectionRequestDTO' is not null or undefined
            assertParamExists('collectionControllerCreateCollection', 'createCollectionRequestDTO', createCollectionRequestDTO)
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCollectionRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteCollection: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerDeleteCollection', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteDoc: async (collectionId: string, docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerDeleteDoc', 'collectionId', collectionId)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('collectionControllerDeleteDoc', 'docId', docId)
            const localVarPath = `/collections/{collection_id}/docs/{doc_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete docs based on metadata filter
         * @param {string} collectionId 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteDocsByMetadata: async (collectionId: string, filter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerDeleteDocsByMetadata', 'collectionId', collectionId)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('collectionControllerDeleteDocsByMetadata', 'filter', filter)
            const localVarPath = `/collections/{collection_id}/docs`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a collection info
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollection: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerGetCollection', 'collectionId', collectionId)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollections: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetDocById: async (collectionId: string, docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerGetDocById', 'collectionId', collectionId)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('collectionControllerGetDocById', 'docId', docId)
            const localVarPath = `/collections/{collection_id}/docs/{doc_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Similarity search query
         * @param {string} collectionId 
         * @param {SimilaritySearchQueryDTO} similaritySearchQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerSimilaritySearch: async (collectionId: string, similaritySearchQueryDTO: SimilaritySearchQueryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerSimilaritySearch', 'collectionId', collectionId)
            // verify required parameter 'similaritySearchQueryDTO' is not null or undefined
            assertParamExists('collectionControllerSimilaritySearch', 'similaritySearchQueryDTO', similaritySearchQueryDTO)
            const localVarPath = `/collections/{collection_id}/query`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(similaritySearchQueryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a collection
         * @param {string} collectionId 
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerUpdateCollection: async (collectionId: string, createCollectionRequestDTO: CreateCollectionRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerUpdateCollection', 'collectionId', collectionId)
            // verify required parameter 'createCollectionRequestDTO' is not null or undefined
            assertParamExists('collectionControllerUpdateCollection', 'createCollectionRequestDTO', createCollectionRequestDTO)
            const localVarPath = `/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCollectionRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update or upsert doc
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerUpdateDoc: async (collectionId: string, docId: string, updateDocumentRequestDTO: UpdateDocumentRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerUpdateDoc', 'collectionId', collectionId)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('collectionControllerUpdateDoc', 'docId', docId)
            // verify required parameter 'updateDocumentRequestDTO' is not null or undefined
            assertParamExists('collectionControllerUpdateDoc', 'updateDocumentRequestDTO', updateDocumentRequestDTO)
            const localVarPath = `/collections/{collection_id}/docs/{doc_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionApi - functional programming interface
 * @export
 */
export const CollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new doc
         * @param {string} collectionId 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerAddDocToCollection(collectionId: string, createDocumentRequestDTO: CreateDocumentRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerAddDocToCollection(collectionId, createDocumentRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerAddDocToCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Use a file to chunk and add to collection
         * @param {string} collectionId 
         * @param {ChunkFileRequestDTO} chunkFileRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerChunkFileToCollection(collectionId: string, chunkFileRequestDTO: ChunkFileRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerChunkFileToCollection(collectionId, chunkFileRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerChunkFileToCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new collection
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerCreateCollection(createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerCreateCollection(createCollectionRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerCreateCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerDeleteCollection(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerDeleteCollection(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerDeleteCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerDeleteDoc(collectionId: string, docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerDeleteDoc(collectionId, docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerDeleteDoc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete docs based on metadata filter
         * @param {string} collectionId 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerDeleteDocsByMetadata(collectionId: string, filter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerDeleteDocsByMetadata(collectionId, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerDeleteDocsByMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a collection info
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerGetCollection(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerGetCollection(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerGetCollections(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerGetCollections(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerGetCollections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerGetDocById(collectionId: string, docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerGetDocById(collectionId, docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerGetDocById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Similarity search query
         * @param {string} collectionId 
         * @param {SimilaritySearchQueryDTO} similaritySearchQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerSimilaritySearch(collectionId: string, similaritySearchQueryDTO: SimilaritySearchQueryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerSimilaritySearch(collectionId, similaritySearchQueryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerSimilaritySearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates a collection
         * @param {string} collectionId 
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerUpdateCollection(collectionId: string, createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerUpdateCollection(collectionId, createCollectionRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerUpdateCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update or upsert doc
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerUpdateDoc(collectionId: string, docId: string, updateDocumentRequestDTO: UpdateDocumentRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerUpdateDoc(collectionId, docId, updateDocumentRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionApi.collectionControllerUpdateDoc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CollectionApi - factory interface
 * @export
 */
export const CollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new doc
         * @param {string} collectionId 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerAddDocToCollection(collectionId: string, createDocumentRequestDTO: CreateDocumentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerAddDocToCollection(collectionId, createDocumentRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Use a file to chunk and add to collection
         * @param {string} collectionId 
         * @param {ChunkFileRequestDTO} chunkFileRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerChunkFileToCollection(collectionId: string, chunkFileRequestDTO: ChunkFileRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerChunkFileToCollection(collectionId, chunkFileRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new collection
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerCreateCollection(createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerCreateCollection(createCollectionRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a collection
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteCollection(collectionId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerDeleteCollection(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteDoc(collectionId: string, docId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerDeleteDoc(collectionId, docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete docs based on metadata filter
         * @param {string} collectionId 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteDocsByMetadata(collectionId: string, filter: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerDeleteDocsByMetadata(collectionId, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a collection info
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollection(collectionId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerGetCollection(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollections(options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerGetCollections(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve doc by ID
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetDocById(collectionId: string, docId: string, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerGetDocById(collectionId, docId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Similarity search query
         * @param {string} collectionId 
         * @param {SimilaritySearchQueryDTO} similaritySearchQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerSimilaritySearch(collectionId: string, similaritySearchQueryDTO: SimilaritySearchQueryDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerSimilaritySearch(collectionId, similaritySearchQueryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a collection
         * @param {string} collectionId 
         * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerUpdateCollection(collectionId: string, createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerUpdateCollection(collectionId, createCollectionRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update or upsert doc
         * @param {string} collectionId 
         * @param {string} docId 
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerUpdateDoc(collectionId: string, docId: string, updateDocumentRequestDTO: UpdateDocumentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDTO> {
            return localVarFp.collectionControllerUpdateDoc(collectionId, docId, updateDocumentRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionApi - object-oriented interface
 * @export
 * @class CollectionApi
 * @extends {BaseAPI}
 */
export class CollectionApi extends BaseAPI {
    /**
     * 
     * @summary Add a new doc
     * @param {string} collectionId 
     * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerAddDocToCollection(collectionId: string, createDocumentRequestDTO: CreateDocumentRequestDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerAddDocToCollection(collectionId, createDocumentRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Use a file to chunk and add to collection
     * @param {string} collectionId 
     * @param {ChunkFileRequestDTO} chunkFileRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerChunkFileToCollection(collectionId: string, chunkFileRequestDTO: ChunkFileRequestDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerChunkFileToCollection(collectionId, chunkFileRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new collection
     * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerCreateCollection(createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerCreateCollection(createCollectionRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a collection
     * @param {string} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerDeleteCollection(collectionId: string, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerDeleteCollection(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete doc by ID
     * @param {string} collectionId 
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerDeleteDoc(collectionId: string, docId: string, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerDeleteDoc(collectionId, docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete docs based on metadata filter
     * @param {string} collectionId 
     * @param {string} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerDeleteDocsByMetadata(collectionId: string, filter: string, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerDeleteDocsByMetadata(collectionId, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a collection info
     * @param {string} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerGetCollection(collectionId: string, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerGetCollection(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerGetCollections(options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerGetCollections(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve doc by ID
     * @param {string} collectionId 
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerGetDocById(collectionId: string, docId: string, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerGetDocById(collectionId, docId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Similarity search query
     * @param {string} collectionId 
     * @param {SimilaritySearchQueryDTO} similaritySearchQueryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerSimilaritySearch(collectionId: string, similaritySearchQueryDTO: SimilaritySearchQueryDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerSimilaritySearch(collectionId, similaritySearchQueryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a collection
     * @param {string} collectionId 
     * @param {CreateCollectionRequestDTO} createCollectionRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerUpdateCollection(collectionId: string, createCollectionRequestDTO: CreateCollectionRequestDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerUpdateCollection(collectionId, createCollectionRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update or upsert doc
     * @param {string} collectionId 
     * @param {string} docId 
     * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApi
     */
    public collectionControllerUpdateDoc(collectionId: string, docId: string, updateDocumentRequestDTO: UpdateDocumentRequestDTO, options?: RawAxiosRequestConfig) {
        return CollectionApiFp(this.configuration).collectionControllerUpdateDoc(collectionId, docId, updateDocumentRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



