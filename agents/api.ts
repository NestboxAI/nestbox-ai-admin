/* tslint:disable */
/* eslint-disable */
/**
 * Nestbox API Agents API
 * API for Nestbox Agents, control your agents
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateGuardrailDto
 */
export interface CreateGuardrailDto {
    /**
     * Whether the guardrail is active
     * @type {boolean}
     * @memberof CreateGuardrailDto
     */
    'isActive': boolean;
    /**
     * Threshold setting ranging from 0.0 to 1.0
     * @type {number}
     * @memberof CreateGuardrailDto
     */
    'thresholdSetting': number;
    /**
     * Severity level of the guardrail
     * @type {string}
     * @memberof CreateGuardrailDto
     */
    'severity': CreateGuardrailDtoSeverityEnum;
    /**
     * Risk level of the guardrail
     * @type {string}
     * @memberof CreateGuardrailDto
     */
    'risk': CreateGuardrailDtoRiskEnum;
    /**
     * Flag status for the guardrail
     * @type {string}
     * @memberof CreateGuardrailDto
     */
    'flag': CreateGuardrailDtoFlagEnum;
    /**
     * List of users associated with the guardrail
     * @type {Array<GuardrailUserDto>}
     * @memberof CreateGuardrailDto
     */
    'guardrailUsers'?: Array<GuardrailUserDto>;
}

export const CreateGuardrailDtoSeverityEnum = {
    Low: 'low',
    Medium: 'medium',
    High: 'high'
} as const;

export type CreateGuardrailDtoSeverityEnum = typeof CreateGuardrailDtoSeverityEnum[keyof typeof CreateGuardrailDtoSeverityEnum];
export const CreateGuardrailDtoRiskEnum = {
    Low: 'low',
    Medium: 'medium',
    High: 'high'
} as const;

export type CreateGuardrailDtoRiskEnum = typeof CreateGuardrailDtoRiskEnum[keyof typeof CreateGuardrailDtoRiskEnum];
export const CreateGuardrailDtoFlagEnum = {
    Pass: 'pass',
    Block: 'block'
} as const;

export type CreateGuardrailDtoFlagEnum = typeof CreateGuardrailDtoFlagEnum[keyof typeof CreateGuardrailDtoFlagEnum];

/**
 * 
 * @export
 * @interface CreateWebhookDto
 */
export interface CreateWebhookDto {
    /**
     * The URL for the webhook
     * @type {string}
     * @memberof CreateWebhookDto
     */
    'url': string;
    /**
     * Comma-separated notifications. Valid values: QUERY_CREATED, QUERY_COMPLETED, QUERY_FAILED, EVENT_CREATED, EVENT_UPDATED
     * @type {string}
     * @memberof CreateWebhookDto
     */
    'notifications': string;
}
/**
 * 
 * @export
 * @interface GuardrailUserDto
 */
export interface GuardrailUserDto {
    /**
     * Username of the user
     * @type {string}
     * @memberof GuardrailUserDto
     */
    'userName': string;
    /**
     * Email of the user
     * @type {string}
     * @memberof GuardrailUserDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface QueryHandlerDto
 */
export interface QueryHandlerDto {
    /**
     * Parameters for the query, must include temperature, top_p, and max_tokens
     * @type {object}
     * @memberof QueryHandlerDto
     */
    'params': object;
}
/**
 * 
 * @export
 * @interface UpdateWebhookDto
 */
export interface UpdateWebhookDto {
    /**
     * The URL for the webhook
     * @type {string}
     * @memberof UpdateWebhookDto
     */
    'url'?: string;
    /**
     * Comma-separated notifications. Valid values: QUERY_CREATED, QUERY_COMPLETED, QUERY_FAILED, EVENT_CREATED, EVENT_UPDATED
     * @type {string}
     * @memberof UpdateWebhookDto
     */
    'notifications'?: string;
}

/**
 * EventLogsApi - axios parameter creator
 * @export
 */
export const EventLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsEventLogsControllerGetEventLogs: async (id: string, page: string, limit: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsEventLogsControllerGetEventLogs', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('agentOperationsEventLogsControllerGetEventLogs', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('agentOperationsEventLogsControllerGetEventLogs', 'limit', limit)
            const localVarPath = `/agents/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsEventLogsControllerGetEventLogsByQueryId: async (id: string, queryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsEventLogsControllerGetEventLogsByQueryId', 'id', id)
            // verify required parameter 'queryId' is not null or undefined
            assertParamExists('agentOperationsEventLogsControllerGetEventLogsByQueryId', 'queryId', queryId)
            const localVarPath = `/agents/{id}/eventsByQueryId`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (queryId !== undefined) {
                localVarQueryParameter['queryId'] = queryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsEventLogsControllerGetEventLogs: async (id: string, page: string, limit: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsEventLogsControllerGetEventLogs', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('modelOperationsEventLogsControllerGetEventLogs', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('modelOperationsEventLogsControllerGetEventLogs', 'limit', limit)
            const localVarPath = `/models/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsEventLogsControllerGetEventLogsByQueryId: async (id: string, queryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsEventLogsControllerGetEventLogsByQueryId', 'id', id)
            // verify required parameter 'queryId' is not null or undefined
            assertParamExists('modelOperationsEventLogsControllerGetEventLogsByQueryId', 'queryId', queryId)
            const localVarPath = `/models/{id}/eventsByQueryId`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (queryId !== undefined) {
                localVarQueryParameter['queryId'] = queryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventLogsApi - functional programming interface
 * @export
 */
export const EventLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsEventLogsControllerGetEventLogs(id, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogsApi.agentOperationsEventLogsControllerGetEventLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogsApi.agentOperationsEventLogsControllerGetEventLogsByQueryId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsEventLogsControllerGetEventLogs(id, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogsApi.modelOperationsEventLogsControllerGetEventLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventLogsApi.modelOperationsEventLogsControllerGetEventLogsByQueryId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventLogsApi - factory interface
 * @export
 */
export const EventLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventLogsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsEventLogsControllerGetEventLogs(id, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} page 
         * @param {string} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsEventLogsControllerGetEventLogs(id, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} queryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventLogsApi - object-oriented interface
 * @export
 * @class EventLogsApi
 * @extends {BaseAPI}
 */
export class EventLogsApi extends BaseAPI {
    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} page 
     * @param {string} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogsApi
     */
    public agentOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig) {
        return EventLogsApiFp(this.configuration).agentOperationsEventLogsControllerGetEventLogs(id, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} queryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogsApi
     */
    public agentOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig) {
        return EventLogsApiFp(this.configuration).agentOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} page 
     * @param {string} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogsApi
     */
    public modelOperationsEventLogsControllerGetEventLogs(id: string, page: string, limit: string, options?: RawAxiosRequestConfig) {
        return EventLogsApiFp(this.configuration).modelOperationsEventLogsControllerGetEventLogs(id, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} queryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventLogsApi
     */
    public modelOperationsEventLogsControllerGetEventLogsByQueryId(id: string, queryId: string, options?: RawAxiosRequestConfig) {
        return EventLogsApiFp(this.configuration).modelOperationsEventLogsControllerGetEventLogsByQueryId(id, queryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GuardrailsApi - axios parameter creator
 * @export
 */
export const GuardrailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerCreateGuardrails: async (id: string, createGuardrailDto: CreateGuardrailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerCreateGuardrails', 'id', id)
            // verify required parameter 'createGuardrailDto' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerCreateGuardrails', 'createGuardrailDto', createGuardrailDto)
            const localVarPath = `/agents/{id}/guardrails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGuardrailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerDeleteGuardrails: async (id: string, guardrailsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerDeleteGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerDeleteGuardrails', 'guardrailsId', guardrailsId)
            const localVarPath = `/agents/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerGetAllGuardrails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerGetAllGuardrails', 'id', id)
            const localVarPath = `/agents/{id}/guardrails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerGetGuardrails: async (id: string, guardrailsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerGetGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerGetGuardrails', 'guardrailsId', guardrailsId)
            const localVarPath = `/agents/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerUpdateGuardrails: async (id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerUpdateGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerUpdateGuardrails', 'guardrailsId', guardrailsId)
            // verify required parameter 'createGuardrailDto' is not null or undefined
            assertParamExists('agentOperationsGuardrailsControllerUpdateGuardrails', 'createGuardrailDto', createGuardrailDto)
            const localVarPath = `/agents/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGuardrailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerCreateGuardrails: async (id: string, createGuardrailDto: CreateGuardrailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerCreateGuardrails', 'id', id)
            // verify required parameter 'createGuardrailDto' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerCreateGuardrails', 'createGuardrailDto', createGuardrailDto)
            const localVarPath = `/models/{id}/guardrails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGuardrailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerDeleteGuardrails: async (id: string, guardrailsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerDeleteGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerDeleteGuardrails', 'guardrailsId', guardrailsId)
            const localVarPath = `/models/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerGetAllGuardrails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerGetAllGuardrails', 'id', id)
            const localVarPath = `/models/{id}/guardrails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerGetGuardrails: async (id: string, guardrailsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerGetGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerGetGuardrails', 'guardrailsId', guardrailsId)
            const localVarPath = `/models/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerUpdateGuardrails: async (id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerUpdateGuardrails', 'id', id)
            // verify required parameter 'guardrailsId' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerUpdateGuardrails', 'guardrailsId', guardrailsId)
            // verify required parameter 'createGuardrailDto' is not null or undefined
            assertParamExists('modelOperationsGuardrailsControllerUpdateGuardrails', 'createGuardrailDto', createGuardrailDto)
            const localVarPath = `/models/{id}/guardrails/{guardrailsId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"guardrailsId"}}`, encodeURIComponent(String(guardrailsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGuardrailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuardrailsApi - functional programming interface
 * @export
 */
export const GuardrailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuardrailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.agentOperationsGuardrailsControllerCreateGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.agentOperationsGuardrailsControllerDeleteGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsGuardrailsControllerGetAllGuardrails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.agentOperationsGuardrailsControllerGetAllGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.agentOperationsGuardrailsControllerGetGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.agentOperationsGuardrailsControllerUpdateGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.modelOperationsGuardrailsControllerCreateGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.modelOperationsGuardrailsControllerDeleteGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsGuardrailsControllerGetAllGuardrails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.modelOperationsGuardrailsControllerGetAllGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.modelOperationsGuardrailsControllerGetGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.modelOperationsGuardrailsControllerUpdateGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuardrailsApi - factory interface
 * @export
 */
export const GuardrailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuardrailsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsGuardrailsControllerGetAllGuardrails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsGuardrailsControllerGetAllGuardrails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} guardrailsId ID of the guardrails.
         * @param {CreateGuardrailDto} createGuardrailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuardrailsApi - object-oriented interface
 * @export
 * @class GuardrailsApi
 * @extends {BaseAPI}
 */
export class GuardrailsApi extends BaseAPI {
    /**
     * 
     * @param {string} id ID of the agent.
     * @param {CreateGuardrailDto} createGuardrailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public agentOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).agentOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public agentOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).agentOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public agentOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).agentOperationsGuardrailsControllerGetAllGuardrails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public agentOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).agentOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {CreateGuardrailDto} createGuardrailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public agentOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).agentOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {CreateGuardrailDto} createGuardrailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public modelOperationsGuardrailsControllerCreateGuardrails(id: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).modelOperationsGuardrailsControllerCreateGuardrails(id, createGuardrailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public modelOperationsGuardrailsControllerDeleteGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).modelOperationsGuardrailsControllerDeleteGuardrails(id, guardrailsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public modelOperationsGuardrailsControllerGetAllGuardrails(id: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).modelOperationsGuardrailsControllerGetAllGuardrails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public modelOperationsGuardrailsControllerGetGuardrails(id: string, guardrailsId: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).modelOperationsGuardrailsControllerGetGuardrails(id, guardrailsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} guardrailsId ID of the guardrails.
     * @param {CreateGuardrailDto} createGuardrailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public modelOperationsGuardrailsControllerUpdateGuardrails(id: string, guardrailsId: string, createGuardrailDto: CreateGuardrailDto, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).modelOperationsGuardrailsControllerUpdateGuardrails(id, guardrailsId, createGuardrailDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsQueryControllerCreateQuery: async (id: string, queryHandlerDto: QueryHandlerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsQueryControllerCreateQuery', 'id', id)
            // verify required parameter 'queryHandlerDto' is not null or undefined
            assertParamExists('agentOperationsQueryControllerCreateQuery', 'queryHandlerDto', queryHandlerDto)
            const localVarPath = `/agents/{id}/query`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryHandlerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsQueryControllerCreateQuery: async (id: string, queryHandlerDto: QueryHandlerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsQueryControllerCreateQuery', 'id', id)
            // verify required parameter 'queryHandlerDto' is not null or undefined
            assertParamExists('modelOperationsQueryControllerCreateQuery', 'queryHandlerDto', queryHandlerDto)
            const localVarPath = `/models/{id}/query`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryHandlerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsQueryControllerCreateQuery(id, queryHandlerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.agentOperationsQueryControllerCreateQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsQueryControllerCreateQuery(id, queryHandlerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.modelOperationsQueryControllerCreateQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsQueryControllerCreateQuery(id, queryHandlerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {QueryHandlerDto} queryHandlerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsQueryControllerCreateQuery(id, queryHandlerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @param {string} id ID of the agent.
     * @param {QueryHandlerDto} queryHandlerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public agentOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).agentOperationsQueryControllerCreateQuery(id, queryHandlerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {QueryHandlerDto} queryHandlerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public modelOperationsQueryControllerCreateQuery(id: string, queryHandlerDto: QueryHandlerDto, options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).modelOperationsQueryControllerCreateQuery(id, queryHandlerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServerLiveStatusApi - axios parameter creator
 * @export
 */
export const ServerLiveStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerLiveStatusApi - functional programming interface
 * @export
 */
export const ServerLiveStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServerLiveStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServerLiveStatusApi.appControllerGetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServerLiveStatusApi - factory interface
 * @export
 */
export const ServerLiveStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServerLiveStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServerLiveStatusApi - object-oriented interface
 * @export
 * @class ServerLiveStatusApi
 * @extends {BaseAPI}
 */
export class ServerLiveStatusApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerLiveStatusApi
     */
    public appControllerGetStatus(options?: RawAxiosRequestConfig) {
        return ServerLiveStatusApiFp(this.configuration).appControllerGetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerCreateWebhook: async (id: string, createWebhookDto: CreateWebhookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerCreateWebhook', 'id', id)
            // verify required parameter 'createWebhookDto' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerCreateWebhook', 'createWebhookDto', createWebhookDto)
            const localVarPath = `/agents/{id}/webhooks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWebhookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerDeleteWebhook: async (id: string, webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerDeleteWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerDeleteWebhook', 'webhookId', webhookId)
            const localVarPath = `/agents/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerGetAllWebhooks: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerGetAllWebhooks', 'id', id)
            const localVarPath = `/agents/{id}/webhooks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerGetWebhook: async (id: string, webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerGetWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerGetWebhook', 'webhookId', webhookId)
            const localVarPath = `/agents/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerUpdateWebhook: async (id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerUpdateWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerUpdateWebhook', 'webhookId', webhookId)
            // verify required parameter 'updateWebhookDto' is not null or undefined
            assertParamExists('agentOperationsWebhooksControllerUpdateWebhook', 'updateWebhookDto', updateWebhookDto)
            const localVarPath = `/agents/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWebhookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerCreateWebhook: async (id: string, createWebhookDto: CreateWebhookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerCreateWebhook', 'id', id)
            // verify required parameter 'createWebhookDto' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerCreateWebhook', 'createWebhookDto', createWebhookDto)
            const localVarPath = `/models/{id}/webhooks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWebhookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerDeleteWebhook: async (id: string, webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerDeleteWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerDeleteWebhook', 'webhookId', webhookId)
            const localVarPath = `/models/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerGetAllWebhooks: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerGetAllWebhooks', 'id', id)
            const localVarPath = `/models/{id}/webhooks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerGetWebhook: async (id: string, webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerGetWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerGetWebhook', 'webhookId', webhookId)
            const localVarPath = `/models/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerUpdateWebhook: async (id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerUpdateWebhook', 'id', id)
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerUpdateWebhook', 'webhookId', webhookId)
            // verify required parameter 'updateWebhookDto' is not null or undefined
            assertParamExists('modelOperationsWebhooksControllerUpdateWebhook', 'updateWebhookDto', updateWebhookDto)
            const localVarPath = `/models/{id}/webhooks/{webhookId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWebhookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.agentOperationsWebhooksControllerCreateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsWebhooksControllerDeleteWebhook(id, webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.agentOperationsWebhooksControllerDeleteWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsWebhooksControllerGetAllWebhooks(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.agentOperationsWebhooksControllerGetAllWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsWebhooksControllerGetWebhook(id, webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.agentOperationsWebhooksControllerGetWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.agentOperationsWebhooksControllerUpdateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.modelOperationsWebhooksControllerCreateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsWebhooksControllerDeleteWebhook(id, webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.modelOperationsWebhooksControllerDeleteWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsWebhooksControllerGetAllWebhooks(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.modelOperationsWebhooksControllerGetAllWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsWebhooksControllerGetWebhook(id, webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.modelOperationsWebhooksControllerGetWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modelOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modelOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.modelOperationsWebhooksControllerUpdateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsWebhooksControllerDeleteWebhook(id, webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsWebhooksControllerGetAllWebhooks(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsWebhooksControllerGetWebhook(id, webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the agent.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {CreateWebhookDto} createWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsWebhooksControllerDeleteWebhook(id, webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsWebhooksControllerGetAllWebhooks(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsWebhooksControllerGetWebhook(id, webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the model.
         * @param {string} webhookId ID of the webhook.
         * @param {UpdateWebhookDto} updateWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modelOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * 
     * @param {string} id ID of the agent.
     * @param {CreateWebhookDto} createWebhookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public agentOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).agentOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} webhookId ID of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public agentOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).agentOperationsWebhooksControllerDeleteWebhook(id, webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public agentOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).agentOperationsWebhooksControllerGetAllWebhooks(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} webhookId ID of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public agentOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).agentOperationsWebhooksControllerGetWebhook(id, webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the agent.
     * @param {string} webhookId ID of the webhook.
     * @param {UpdateWebhookDto} updateWebhookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public agentOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).agentOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {CreateWebhookDto} createWebhookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modelOperationsWebhooksControllerCreateWebhook(id: string, createWebhookDto: CreateWebhookDto, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modelOperationsWebhooksControllerCreateWebhook(id, createWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} webhookId ID of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modelOperationsWebhooksControllerDeleteWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modelOperationsWebhooksControllerDeleteWebhook(id, webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modelOperationsWebhooksControllerGetAllWebhooks(id: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modelOperationsWebhooksControllerGetAllWebhooks(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} webhookId ID of the webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modelOperationsWebhooksControllerGetWebhook(id: string, webhookId: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modelOperationsWebhooksControllerGetWebhook(id, webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the model.
     * @param {string} webhookId ID of the webhook.
     * @param {UpdateWebhookDto} updateWebhookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modelOperationsWebhooksControllerUpdateWebhook(id: string, webhookId: string, updateWebhookDto: UpdateWebhookDto, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modelOperationsWebhooksControllerUpdateWebhook(id, webhookId, updateWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }
}



